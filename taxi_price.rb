# ある町では、公共交通の手段としてタクシーが発達しています。
# 様々な料金のタクシーがあるため、初乗りが安くても最終的な運賃が高いタクシーを拾ってしまうかもしれません。
# タクシーの運賃は初乗り距離と初乗り運賃、加算距離、加算運賃で決まります。
# タクシーの乗車距離が初乗り距離未満の場合は、初乗り運賃だけで移動することができます。
# 初乗り距離と同じ距離だけ乗車した段階で、運賃に加算運賃が追加され、以後加算距離を移動する毎に加算運賃が追加されていきます。
# あなたは今いる場所から X メートル離れた場所へ、 1 台のタクシーで移動しようとしています。
# 利用可能なタクシー N 台の料金のパラメータが与えられるので、タクシーで X メートル移動した際の最安値と最高値を計算してください。
# 例えば、 入力例 1 の場合は以下のように 600円 が最安値となり、 800円 が最高値となります。
# 1 番目のタクシーは初乗り距離以上なので加算距離 1 つ分が追加され 600円 かかります。
# 2 番目のタクシーは初乗り距離までで到着するので、初乗り運賃のみで 800円 かかります。


# 入力される値
## 入力は以下のフォーマットで与えられます。

## N X
## a_1 b_1 c_1 d_1
## a_2 b_2 c_2 d_2
## ...
## a_N b_N c_N d_N

## ・1 行目にタクシーの種類数 N、目的地までの距離 X がこの順に整数で半角スペース区切りで与えられます。
## ・2 行目から続く N 行には i 番目 (1 ≦ i ≦ N) のタクシーの 初乗り距離 a_i、 初乗り運賃 b_i、 加算距離 c_i、 加算運賃 d_i が整数でこの順にスペース区切りで与えられます。
## ・入力は合計 N + 1 行であり、最終行の末尾に改行が1つ入ります。

## それぞれの値は文字列で標準入力から渡されます。


# 期待する出力
## タクシーの料金の最安値と最高値を以下の形式で出力してください。

## P_1 P_2

## 出力の最後に改行を入れ、余計な文字、空行を含んではいけません。


# 条件
## すべてのテストケースにおいて、以下の条件をみたします。

## ・2 ≦ N ≦ 100
## ・1 ≦ X ≦ 100,000
## ・1 ≦ a_i, b_i, c_i, d_i ≦ 5,000 (1 ≦ i ≦ N)


# 入力例1
## 2 700
## 600 200 200 400
## 900 800 400 500

# 出力例1
## 600 800

# 入力例2
## 2 8000
## 2000 730 280 90
## 1052 410 237 80

# 出力例2
## 2710 2810

# 入力例3
## 3 600
## 600 200 200 400
## 900 800 400 500
## 200 200 200 300

# 出力例3
## 600 1100


line = gets.chomp.split
type = line[0].to_i
distance = line[1].to_i

taxi_elements = []
for i in 1..type
    elements = gets.chomp.split
    taxi_elements << elements
end

taxi_elements.map! do |elements|
    elements.map! do |element|
        element.to_i
    end
end

taxi_price = []

taxi_elements.each do |elements|
    if elements[0] > distance
        taxi_price << elements[1]
    else
        devided_value = (distance - elements[0]) / elements[2]
        taxi_price << elements[1] + elements[3] * (devided_value + 1)
    end
end

puts "#{taxi_price.min} #{taxi_price.max}"